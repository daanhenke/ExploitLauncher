

mp4_size = 41224;
headerBytes = Buffer([0x00, 0x00, 0x00, 0x18, 0x66, 0x74, 0x79, 0x70, 0x33, 0x67, 0x70, 0x36, 0x00, 0x00, 0x01, 0x00,
    0x69, 0x73, 0x6F, 0x6D, 0x33, 0x67, 0x53, 0x36, 0x00, 0x00, 0x90, 0x00, 0x6D, 0x6F, 0x6F, 0x76,
    0x00, 0x00, 0x00, 0x6C, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x5B, 0x81, 0x1A,
    0xC9, 0x5B, 0x81, 0x1A, 0xFA, 0x00, 0x02, 0x58, 0x00, 0x00, 0x02, 0x2D, 0x00, 0x01, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
    0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x69, 0x6F, 0x64, 0x73, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x07, 0x00, 0x4F, 0xFF, 0xFF, 0x28, 0x03, 0xFF, 0x00, 0x00, 0x88, 0x00,
    0x74, 0x72, 0x61, 0x6B, 0x00, 0x00, 0x00, 0x5C, 0x74, 0x6B, 0x68, 0x64, 0x00, 0x00, 0x00, 0x01,
    0xC9, 0x5B, 0x81, 0x1A, 0xC9, 0x5B, 0x81, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x74, 0x78, 0x33, 0x67]);

v532_Header_Patch_values = Buffer([0x88, 0x80, 0x78]);
v532_Header_Patch_offsets = [26, 142, 242];

Header_Pattern_offset = 248;
Header_Pattern_length = 5162;
Header_Pattern_spacing = 4;
Header_Pattern_value = 0x60;
BinLead_bytes = Buffer([0x48, 0x00, 0x00, 0x05, 0x7C, 0x68, 0x02, 0xA6, 0x38, 0x80, 0x00, 0x48, 0x7C, 0x84, 0x1A, 0x14,
    0x80, 0xA4, 0x00, 0x00, 0x38, 0x84, 0x00, 0x04, 0x7F, 0xA3, 0xEB, 0x78, 0x38, 0xC0, 0x00, 0x02,
    0x7C, 0xA5, 0x34, 0x30, 0x7C, 0xA9, 0x03, 0xA6, 0x80, 0xA4, 0x00, 0x00, 0x90, 0xA3, 0x00, 0x00,
    0x38, 0x84, 0x00, 0x04, 0x38, 0x63, 0x00, 0x04, 0x42, 0x00, 0xFF, 0xF0, 0x7C, 0x21, 0xF2, 0x14,
    0x80, 0x61, 0x00, 0x04, 0x7C, 0x69, 0x03, 0xA6, 0x4E, 0x80, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00,
    0x94, 0x21]);
BinLead_offset = 504;

Bin_Fill_offset = 586;
Bin_Fill_length = 24238;
Bin_Fill_spacing = 1;
Bin_Fill_value = 0x90;

v532_Pattern_offset = 24824;
v532_Pattern_length = 6152;
v532_Pattern_spacing = 1;
v532_Pattern_value = Buffer([0x01, 0x01, 0xCD, 0x14]);

v550_Pattern_offset = 24824;
v550_Pattern_length = 6152;
v550_Pattern_spacing = 1;
v550_Pattern_value = Buffer([0x01, 0x01, 0xCD, 0x24]);

Footer_Fill_offset = 31924;
Footer_Fill_length = 9300;
Footer_Fill_spacing = 1;
Footer_Fill_value = 0x48;

Footer_Magic_offset = 33008;
Footer_Magic_value = Buffer([0x00, 0x00, 0x01, 0xC5, 0x6D, 0x64, 0x69, 0x61, 0x00, 0x00, 0x00, 0x01, 0x74, 0x78, 0x33, 0x67,
    0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00]);

v532_Footer_offset = 30976;
v532_Footer_value = Buffer([0x01, 0x02, 0x04, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28,
    0x01, 0x04, 0x29, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C, 0x01, 0x04, 0x22, 0x84, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28,
    0x01, 0x04, 0x12, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28, 0x01, 0x03, 0x70, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28,
    0x01, 0x03, 0x5A, 0x68, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x56, 0xDD, 0x28,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28, 0x01, 0x03, 0x70, 0xC0, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28,
    0x01, 0x02, 0x3E, 0xE8, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28, 0x01, 0x02, 0x40, 0x10, 0x01, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x13, 0x68, 0x01, 0x01, 0xCD, 0x70, 0x01, 0x02, 0xA3, 0x1C, 0x01, 0x02, 0xB7, 0x90,
    0x01, 0x02, 0xF0, 0x9C, 0x14, 0x56, 0xDD, 0x28, 0x00, 0x00, 0x00, 0x08, 0x14, 0x56, 0xCD, 0x28,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28, 0x01, 0x03, 0x70, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28,
    0x01, 0x03, 0x5A, 0x68, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x56, 0xDD, 0x28,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28, 0x01, 0x03, 0x70, 0xC0, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28,
    0x01, 0x02, 0x3E, 0xE8, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xD3, 0x28, 0x01, 0x02, 0x40, 0x10, 0x01, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xF8, 0x2C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x13, 0x68, 0x01, 0x01, 0xCD, 0x70, 0x01, 0x02, 0xA3, 0x1C, 0x01, 0x02, 0xB7, 0x90,
    0x01, 0x02, 0xF0, 0x9C, 0x14, 0x56, 0xDD, 0x28, 0x00, 0x00, 0x00, 0x08, 0x14, 0x56, 0xCD, 0x28,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00]);

v550_Footer_offset = 30976;
v550_Footer_value = Buffer([0x01, 0x02, 0x04, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70,
    0x01, 0x04, 0x31, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74, 0x01, 0x04, 0x29, 0xDC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70,
    0x01, 0x04, 0x18, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70, 0x01, 0x03, 0x76, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70,
    0x01, 0x03, 0x5F, 0xC8, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x56, 0xDD, 0x28,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70, 0x01, 0x03, 0x76, 0xC0, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70,
    0x01, 0x02, 0x3F, 0x88, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70, 0x01, 0x02, 0x40, 0xB0, 0x01, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x16, 0x18, 0x01, 0x01, 0xCD, 0x80, 0x01, 0x02, 0xA3, 0xB4, 0x01, 0x02, 0xB8, 0x28,
    0x01, 0x02, 0xF1, 0x60, 0x14, 0x56, 0xDD, 0x28, 0x00, 0x00, 0x00, 0x08, 0x14, 0x56, 0xCD, 0x28,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70, 0x01, 0x03, 0x76, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70,
    0x01, 0x03, 0x5F, 0xC8, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x56, 0xDD, 0x28,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70, 0x01, 0x03, 0x76, 0xC0, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70,
    0x01, 0x02, 0x3F, 0x88, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xDD, 0x70, 0x01, 0x02, 0x40, 0xB0, 0x01, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x74,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x16, 0x18, 0x01, 0x01, 0xCD, 0x80, 0x01, 0x02, 0xA3, 0xB4, 0x01, 0x02, 0xB8, 0x28,
    0x01, 0x02, 0xF1, 0x60, 0x14, 0x56, 0xDD, 0x28, 0x00, 0x00, 0x00, 0x08, 0x14, 0x56, 0xCD, 0x28,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00]);

var bin_data = [];
var mp4_data = Buffer(mp4_size);

function write_bytes(buff, offset) {
    for (var i=0; i < buff.length; i++)
    {
        mp4_data[offset + i] = buff[i];
    }
}

function fill_bytes(byte, offset, length, spacing) {
    for (var i = 0; i < length; i += spacing)
    {
        mp4_data[i + offset] = byte
    }
}

function pattern_bytes(bytes, offset, length, spacing) {
    var byteChoice = 0;
    for (var i=0; i<length; i += spacing)
    {
        mp4_data[i + offset] = bytes[byteChoice];
        byteChoice++;
        if (byteChoice >= bytes.length)
        {
            byteChoice = 0;
        }
    }
}

function toBytesInt32 (val) {
    val &= 0xFFFFFFFF;
    var hex = val.toString(16).toUpperCase();
    return ("00000000" + hex).slice(-8);
}

function write_bin_size() {
    var bin_size = Buffer(toBytesInt32(bin_data.length), 'hex');
    console.log(bin_size);
    for (var i=0; i < 4; i++)
    {
        mp4_data[BinLead_offset + BinLead_bytes.length - 6 + i] = bin_size[i];
    }
}

module.exports = function (bin, version) {
    //Set input and output buffers
    bin_data = bin;
    for (var i=0; i<mp4_size; i++)
    {
        mp4_data[i] = 0x0
    }
    //End

    if (bin_data.length > 29832)
    {
        console.log('The BIN file is bigger then expected. Exiting...');
        return -1;
    }
    else
    {
        write_bytes(headerBytes, 0);
        fill_bytes(Header_Pattern_value, Header_Pattern_offset, Header_Pattern_length, Header_Pattern_spacing);
        write_bytes(BinLead_bytes, BinLead_offset);
        fill_bytes(Bin_Fill_value, Bin_Fill_offset, Bin_Fill_length, Bin_Fill_spacing);

        if(version == 532 || version == 540)
        {
            pattern_bytes(v532_Pattern_value, v532_Pattern_offset, v532_Pattern_length, v532_Pattern_spacing);
            write_bytes(v532_Footer_value, v532_Footer_offset);
            if (version == 532)
            {
                for (i=0; i < v532_Header_Patch_offsets; i++)
                {
                    mp4_data[v532_Header_Patch_offsets[i] ] = v532_Header_Patch_values[i];
                }
            }
        }
        else if (version == 550 || version == 551)
        {
            pattern_bytes(v550_Pattern_value, v550_Pattern_offset, v550_Pattern_length, v550_Pattern_spacing);
            write_bytes(v550_Footer_value, v550_Footer_offset);
        }
        fill_bytes(Footer_Fill_value, Footer_Fill_offset, Footer_Fill_length, Footer_Fill_spacing);
        write_bytes(Footer_Magic_value, Footer_Magic_offset);
        write_bytes(bin_data, BinLead_offset + BinLead_bytes.length - 2);
        write_bin_size();

        return mp4_data;
    }
};